<?xml version="1.0" encoding="UTF-8"?>
<project name="Visualgorithm" default="default" basedir=".">
    <property name="platform.version" value="1.7"/>
    <property name="project.name" value="Visualgorithm"/>
    <property name="project.version" value="0.20"/>
    <property name="project.encoding" value="UTF-8"/>
    <property name="main.class" value="main.Visualgorithm"/>
    <property name="src.dir" location="src"/>
    <property name="test.dir" location="test"/>
    <property name="lib.dir" location="lib"/>
    <property name="img.dir" location="img"/>
    <property name="build.dir" location="bin"/>
    <property name="build.src.dir" location="${build.dir}/src"/>
    <property name="build.test.dir" location="${build.dir}/test"/>
    <property name="dist.dir" location="dist"/>
    <property name="dist.javadoc.dir" location="${dist.dir}/Javadoc"/>
    <property name="dist.test.dir" location="${dist.dir}/Test"/>
    <property name="dist.instrument.dir" location="${dist.dir}/Instrument"/>
    
    <path id="lib.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <dirset dir="${build.src.dir}">
            <include name="**"/>
        </dirset>
    </path>
    
    
    <target name="-pre-compile-src">
        <mkdir dir="${build.src.dir}"/>
    </target>
    
    <target name="-pre-compile-test">
        <mkdir dir="${build.test.dir}"/>
    </target>
    
    <target name="-pre-jar">
        <mkdir dir="${dist.dir}"/>
        <copy todir="${build.src.dir}/img">
            <fileset dir="${img.dir}"/>
        </copy>
    </target>
    
    <target name="clean" description="Clean build products.">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    
    <target name="compile-src-release" depends="-pre-compile-src" description="Compile src directory of the project.">
        <javac destdir="${build.src.dir}" encoding="${project.encoding}" fork="yes" includeantruntime="false" includes="**" source="${platform.version}" sourcepath="" srcdir="${src.dir}" target="${platform.version}"/>
    </target>
    
    <target name="compile-test-release" depends="compile-src-release, -pre-compile-test" description="Compile test directory of the project.">
        <javac destdir="${build.test.dir}" encoding="${project.encoding}" fork="yes" includeantruntime="false" includes="**" source="${platform.version}" sourcepath="" srcdir="${test.dir}" target="${platform.version}">
            <classpath refid="lib.path"/>
        </javac>
    </target>
    
    <target name="compile-src-debug" depends="-pre-compile-src" description="Compile src directory of the project.">
        <javac destdir="${build.src.dir}" encoding="${project.encoding}" fork="yes" includeantruntime="false" includes="**" source="${platform.version}" sourcepath="" srcdir="${src.dir}" target="${platform.version}" debug="yes"/>
    </target>
    
    <target name="jar" depends="compile-src-release, -pre-jar" description="Build JAR.">
        <jar jarfile="${dist.dir}/${project.name}-${project.version}.jar" basedir="${build.src.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="run" depends="jar" description="Run a main class.">
        <java jar="${dist.dir}/${project.name}-${project.version}.jar" fork="true"/>
    </target>
    
    <target name="test" depends="compile-test-release" description="Run unit tests.">
        <mkdir dir="${dist.test.dir}"/>
        <junit printsummary="yes" fork="yes">
            <classpath>
                <path refid="lib.path"/>
                <pathelement path="${build.test.dir}"/>
            </classpath>
            <formatter type="xml" usefile="true"/>
            <batchtest haltonfailure="no" todir="${dist.test.dir}">
                <fileset dir="${build.test.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/*FunctionalTest.class"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${dist.dir}" tofile="Report-JUnit.xml">
            <fileset dir="${dist.test.dir}" includes="*.xml"/>
        </junitreport>
        <delete dir="${dist.test.dir}"/>
    </target>
    
    <target name="cobertura" depends="compile-src-debug" description="Check code coverage. Parameter : ${cobertura.dir}.">
        <mkdir dir="${dist.instrument.dir}"/>
        <taskdef resource="tasks.properties">
            <classpath>
                <fileset dir="${cobertura.dir}">
                    <include name="cobertura*.jar"/>
                    <include name="lib/**/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        <cobertura-instrument datafile="${build.dir}/Cobertura.ser" todir="${dist.instrument.dir}">
            <fileset dir="${build.src.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
        <cobertura-report datafile="${build.dir}/Cobertura.ser" srcdir="${src.dir}" destdir="${dist.dir}" format="xml"/>
        <move file="${dist.dir}/coverage.xml" tofile="${dist.dir}/Report-Cobertura.xml"/>
        <delete dir="${dist.instrument.dir}"/>
    </target>
    
    <target name="javadoc" description="Build Javadoc.">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc author="true" charset="${project.encoding}" destdir="${dist.javadoc.dir}" docencoding="${project.encoding}" encoding="${project.encoding}" failonerror="true" noindex="false" nonavbar="false" notree="false" private="false" source="${platform.version}" splitindex="true" use="true" useexternalfile="true" version="true" windowtitle="${project.name}">
            <fileset dir="${src.dir}">
                <filename name="**/*.java"/>
            </fileset>
        </javadoc>
    </target>
    
    <target name="checkstyle" description="Check Java conventions. Parameters : ${checkstyle.dir}, ${checkstyle.rules.file}.">
        <mkdir dir="${dist.dir}"/>
        <taskdef resource="checkstyletask.properties">
            <classpath>
                <fileset dir="${checkstyle.dir}">
                    <include name="checkstyle*.jar"/>
                    <include name="lib/**/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        <checkstyle config="${checkstyle.rules.file}" failOnViolation="false">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="xml" toFile="${dist.dir}/Report-Checkstyle.xml"/>
        </checkstyle>
    </target>
    
    <target depends="test, jar, javadoc" description="Build and test whole project." name="default"/>
</project>
